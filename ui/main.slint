import "../assets/fonts/Satoshi-Regular.ttf";

import { Palette } from "palette.slint";

import { SimulationControllerCommand, SimulationControllerType, DroneButton, ClientButton, ServerButton } from "button.slint";
import { Position, Edge, Circle, Line } from "graph.slint";

import { AddSender, AddSenderMenu } from "menu/add_sender_menu.slint";
import { RemoveSender, RemoveSenderMenu } from "menu/remove_sender_menu.slint";
import { SetPacketDropRate, SetPacketDropRateMenu } from "menu/set_packet_drop_rate_menu.slint";
import { SendMessage, SendMessageMenu } from "menu/send_message_menu.slint";
import { RegisterToServer, RegisterToServerMenu } from "menu/register_to_server_menu.slint";
import { GetFile, GetFileMenu } from "menu/get_file_menu.slint";
import { GetTextFile, GetTextFileMenu } from "menu/get_text_file_menu.slint";
import { GetMediaFile, GetMediaFileMenu } from "menu/get_media_file_menu.slint";
import { AddTextFile, AddTextFileMenu } from "menu/add_text_file_menu.slint";
import { AddTextFileFromPath, AddTextFileFromPathMenu } from "menu/add_text_file_from_path_menu.slint";
import { AddMediaFileFromPath, AddMediaFileFromPathMenu } from "menu/add_media_file_from_path_menu.slint";
import { RemoveTextFile, RemoveTextFileMenu } from "menu/remove_text_file_menu.slint";
import { RemoveMediaFile, RemoveMediaFileMenu } from "menu/remove_media_file_menu.slint";

export struct Drone {
    title: string,
    id: string,
    pdr: string,
}

export struct Client {
    title: string,
    subtitle: string,
    id: string,
    kind: string,
}

export struct Server {
    title: string,
    subtitle: string,
    id: string,
    kind: string
}

export component MainWindow inherits Window {

    in property <[Drone]> drones;
    in property <[Client]> clients;
    in property <[Server]> servers;

    in property <image> graph_image: @image-url("../assets/images/placeholder.png");

    in property <[string]> logs;

    in property <[Position]> nodes;
    in property <[Edge]> edges;

    callback add_log(input: string);
    
    callback menu_clicked(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);

    callback add_sender(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: AddSender);
    callback remove_sender(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: RemoveSender);
    callback shutdown(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);
    callback crash(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);
    callback set_packet_drop_rate(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: SetPacketDropRate);

    callback get_chats_history(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);
    callback get_registered_clients(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);
    callback send_message(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: SendMessage);
    callback register_to_server(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: RegisterToServer);

    callback get_cached_files(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);
    callback get_file(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: GetFile);
    callback get_text_files(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);
    callback get_text_file(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: GetTextFile);
    callback get_media_files(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);
    callback get_media_file(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: GetMediaFile);
    callback add_text_file(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: AddTextFile);
    callback add_text_file_from_path(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: AddTextFileFromPath);
    //callback add_media_file(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: AddMediaFile);
    callback add_media_file_from_path(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: AddMediaFileFromPath);
    callback remove_text_file(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: RemoveTextFile);
    callback remove_media_file(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string, args: RemoveMediaFile);
    callback query_text_files_list(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);
    callback get_text_files_list(node_command: SimulationControllerCommand, node_type: SimulationControllerType, node_id: string);

    width: 1280px;
    height: 720px;

    title: "Rust Do It";
    icon: @image-url("../assets/images/icons/icon.png");
    
    default-font-family: "Satoshi";

    background: Palette.bg_alt;

    VerticalLayout {

        Rectangle {
            height: 64px;
            width: parent.width;
            background: Palette.bg;

            HorizontalLayout {
                padding-left: 16px;
                padding-right: 16px;
                alignment: start;

                VerticalLayout {
                    alignment: center;

                    Image {
                        source: @image-url("../assets/images/logo.svg");
                        width: 196px;
                        height: 32px;
                    }
                }
            }
        }

        Rectangle { height: 1px; background: Palette.bg_alt; }

        HorizontalLayout {
            spacing: 1px;
            
            //? Nodes column
            Rectangle {
                horizontal-stretch: 1;
                vertical-stretch: 1;
                background: Palette.bg;
                clip: true;

                Flickable {
                    width: parent.width;
                    height: parent.height;

                    VerticalLayout {
                        width: parent.width;
                        padding: 16px;
                        spacing: 8px;

                        alignment: start;

                        Text {
                            text: "DRONES";
                            color: Palette.grey;
                            font-size: 16px;
                            font-weight: 800;
                        }
                        
                        Rectangle { height: 4px; }

                        for drone[i] in drones : DroneButton {
                            title: drone.title;
                            subtitle: "PDR " + drone.pdr + "%";
                            
                            node_id: drone.id;

                            item_clicked(node_command, node_type, node_id) => {
                                if node_command == SimulationControllerCommand.AddSender {
                                    add_sender_menu.node_command = node_command;
                                    add_sender_menu.node_type = node_type;
                                    add_sender_menu.node_id = node_id;
                                    add_sender_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RemoveSender {
                                    remove_sender_menu.node_command = node_command;
                                    remove_sender_menu.node_type = node_type;
                                    remove_sender_menu.node_id = node_id;
                                    remove_sender_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.Shutdown {
                                    shutdown(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.Crash {
                                    crash(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.SetPacketDropRate {
                                    set_packet_drop_rate_menu.node_command = node_command;
                                    set_packet_drop_rate_menu.node_type = node_type;
                                    set_packet_drop_rate_menu.node_id = node_id;
                                    set_packet_drop_rate_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.GetChatsHistory {
                                    get_chats_history(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetRegisteredClients {
                                    get_registered_clients(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.SendMessage {
                                    send_message_menu.node_command = node_command;
                                    send_message_menu.node_type = node_type;
                                    send_message_menu.node_id = node_id;
                                    send_message_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RegisterToServer {
                                    register_to_server_menu.node_command = node_command;
                                    register_to_server_menu.node_type = node_type;
                                    register_to_server_menu.node_id = node_id;
                                    register_to_server_menu.visible = true;
                                } 
                                else if node_command == SimulationControllerCommand.GetCachedFiles {
                                    get_cached_files(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetFile {
                                    get_file_menu.node_command = node_command;
                                    get_file_menu.node_type = node_type;
                                    get_file_menu.node_id = node_id;
                                    get_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.GetTextFiles {
                                    get_text_files(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetTextFile {
                                    get_text_file_menu.node_command = node_command;
                                    get_text_file_menu.node_type = node_type;
                                    get_text_file_menu.node_id = node_id;
                                    get_text_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.GetMediaFiles {
                                    get_media_files(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetMediaFile {
                                    get_media_file_menu.node_command = node_command;
                                    get_media_file_menu.node_type = node_type;
                                    get_media_file_menu.node_id = node_id;
                                    get_media_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.AddTextFile {
                                    add_text_file_menu.node_command = node_command;
                                    add_text_file_menu.node_type = node_type;
                                    add_text_file_menu.node_id = node_id;
                                    add_text_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.AddTextFileFromPath {
                                    add_text_file_from_path_menu.node_command = node_command;
                                    add_text_file_from_path_menu.node_type = node_type;
                                    add_text_file_from_path_menu.node_id = node_id;
                                    add_text_file_from_path_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.AddMediaFileFromPath {
                                    add_media_file_from_path_menu.node_command = node_command;
                                    add_media_file_from_path_menu.node_type = node_type;
                                    add_media_file_from_path_menu.node_id = node_id;
                                    add_media_file_from_path_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RemoveTextFile {
                                    remove_text_file_menu.node_command = node_command;
                                    remove_text_file_menu.node_type = node_type;
                                    remove_text_file_menu.node_id = node_id;
                                    remove_text_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RemoveMediaFile {
                                    remove_media_file_menu.node_command = node_command;
                                    remove_media_file_menu.node_type = node_type;
                                    remove_media_file_menu.node_id = node_id;
                                    remove_media_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.QueryTextFilesList {
                                    query_text_files_list(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetTextFilesList {
                                    get_text_files_list(node_command, node-type, node_id);
                                }
                            }
                        }
                        
                        Rectangle { height: 24px; }

                        Text {
                            text: "CLIENTS";
                            color: Palette.grey;
                            font-size: 16px;
                            font-weight: 800;
                        }

                        Rectangle { height: 4px; }

                        for client[i] in clients : ClientButton {
                            title: client.title;
                            subtitle: client.subtitle;
                            kind: client.kind;
                            node_id: client.id;

                            item_clicked(node_command, node_type, node_id) => {
                                if node_command == SimulationControllerCommand.AddSender {
                                    add_sender_menu.node_command = node_command;
                                    add_sender_menu.node_type = node_type;
                                    add_sender_menu.node_id = node_id;
                                    add_sender_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RemoveSender {
                                    remove_sender_menu.node_command = node_command;
                                    remove_sender_menu.node_type = node_type;
                                    remove_sender_menu.node_id = node_id;
                                    remove_sender_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.Shutdown {
                                    shutdown(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.Crash {
                                    crash(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.SetPacketDropRate {
                                    set_packet_drop_rate_menu.node_command = node_command;
                                    set_packet_drop_rate_menu.node_type = node_type;
                                    set_packet_drop_rate_menu.node_id = node_id;
                                    set_packet_drop_rate_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.GetChatsHistory {
                                    get_chats_history(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetRegisteredClients {
                                    get_registered_clients(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.SendMessage {
                                    send_message_menu.node_command = node_command;
                                    send_message_menu.node_type = node_type;
                                    send_message_menu.node_id = node_id;
                                    send_message_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RegisterToServer {
                                    register_to_server_menu.node_command = node_command;
                                    register_to_server_menu.node_type = node_type;
                                    register_to_server_menu.node_id = node_id;
                                    register_to_server_menu.visible = true;
                                } 
                                else if node_command == SimulationControllerCommand.GetCachedFiles {
                                    get_cached_files(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetFile {
                                    get_file_menu.node_command = node_command;
                                    get_file_menu.node_type = node_type;
                                    get_file_menu.node_id = node_id;
                                    get_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.GetTextFiles {
                                    get_text_files(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetTextFile {
                                    get_text_file_menu.node_command = node_command;
                                    get_text_file_menu.node_type = node_type;
                                    get_text_file_menu.node_id = node_id;
                                    get_text_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.GetMediaFiles {
                                    get_media_files(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetMediaFile {
                                    get_media_file_menu.node_command = node_command;
                                    get_media_file_menu.node_type = node_type;
                                    get_media_file_menu.node_id = node_id;
                                    get_media_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.AddTextFile {
                                    add_text_file_menu.node_command = node_command;
                                    add_text_file_menu.node_type = node_type;
                                    add_text_file_menu.node_id = node_id;
                                    add_text_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.AddTextFileFromPath {
                                    add_text_file_from_path_menu.node_command = node_command;
                                    add_text_file_from_path_menu.node_type = node_type;
                                    add_text_file_from_path_menu.node_id = node_id;
                                    add_text_file_from_path_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.AddMediaFileFromPath {
                                    add_media_file_from_path_menu.node_command = node_command;
                                    add_media_file_from_path_menu.node_type = node_type;
                                    add_media_file_from_path_menu.node_id = node_id;
                                    add_media_file_from_path_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RemoveTextFile {
                                    remove_text_file_menu.node_command = node_command;
                                    remove_text_file_menu.node_type = node_type;
                                    remove_text_file_menu.node_id = node_id;
                                    remove_text_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RemoveMediaFile {
                                    remove_media_file_menu.node_command = node_command;
                                    remove_media_file_menu.node_type = node_type;
                                    remove_media_file_menu.node_id = node_id;
                                    remove_media_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.QueryTextFilesList {
                                    query_text_files_list(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetTextFilesList {
                                    get_text_files_list(node_command, node-type, node_id);
                                }
                            }
                        }
                        
                        Rectangle { height: 24px; }

                        Text {
                            text: "SERVERS";
                            color: Palette.grey;
                            font-size: 16px;
                            font-weight: 800;
                        }

                        Rectangle { height: 4px; }

                        for server[i] in servers : ServerButton {
                            title: server.title;
                            subtitle: server.subtitle;
                            kind: server.kind;
                            node_id: server.id;

                            item_clicked(node_command, node_type, node_id) => {
                                if node_command == SimulationControllerCommand.AddSender {
                                    add_sender_menu.node_command = node_command;
                                    add_sender_menu.node_type = node_type;
                                    add_sender_menu.node_id = node_id;
                                    add_sender_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RemoveSender {
                                    remove_sender_menu.node_command = node_command;
                                    remove_sender_menu.node_type = node_type;
                                    remove_sender_menu.node_id = node_id;
                                    remove_sender_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.Shutdown {
                                    shutdown(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.Crash {
                                    crash(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.SetPacketDropRate {
                                    set_packet_drop_rate_menu.node_command = node_command;
                                    set_packet_drop_rate_menu.node_type = node_type;
                                    set_packet_drop_rate_menu.node_id = node_id;
                                    set_packet_drop_rate_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.GetChatsHistory {
                                    get_chats_history(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetRegisteredClients {
                                    get_registered_clients(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.SendMessage {
                                    send_message_menu.node_command = node_command;
                                    send_message_menu.node_type = node_type;
                                    send_message_menu.node_id = node_id;
                                    send_message_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RegisterToServer {
                                    register_to_server_menu.node_command = node_command;
                                    register_to_server_menu.node_type = node_type;
                                    register_to_server_menu.node_id = node_id;
                                    register_to_server_menu.visible = true;
                                } 
                                else if node_command == SimulationControllerCommand.GetCachedFiles {
                                    get_cached_files(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetFile {
                                    get_file_menu.node_command = node_command;
                                    get_file_menu.node_type = node_type;
                                    get_file_menu.node_id = node_id;
                                    get_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.GetTextFiles {
                                    get_text_files(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetTextFile {
                                    get_text_file_menu.node_command = node_command;
                                    get_text_file_menu.node_type = node_type;
                                    get_text_file_menu.node_id = node_id;
                                    get_text_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.GetMediaFiles {
                                    get_media_files(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetMediaFile {
                                    get_media_file_menu.node_command = node_command;
                                    get_media_file_menu.node_type = node_type;
                                    get_media_file_menu.node_id = node_id;
                                    get_media_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.AddTextFile {
                                    add_text_file_menu.node_command = node_command;
                                    add_text_file_menu.node_type = node_type;
                                    add_text_file_menu.node_id = node_id;
                                    add_text_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.AddTextFileFromPath {
                                    add_text_file_from_path_menu.node_command = node_command;
                                    add_text_file_from_path_menu.node_type = node_type;
                                    add_text_file_from_path_menu.node_id = node_id;
                                    add_text_file_from_path_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.AddMediaFileFromPath {
                                    add_media_file_from_path_menu.node_command = node_command;
                                    add_media_file_from_path_menu.node_type = node_type;
                                    add_media_file_from_path_menu.node_id = node_id;
                                    add_media_file_from_path_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RemoveTextFile {
                                    remove_text_file_menu.node_command = node_command;
                                    remove_text_file_menu.node_type = node_type;
                                    remove_text_file_menu.node_id = node_id;
                                    remove_text_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.RemoveMediaFile {
                                    remove_media_file_menu.node_command = node_command;
                                    remove_media_file_menu.node_type = node_type;
                                    remove_media_file_menu.node_id = node_id;
                                    remove_media_file_menu.visible = true;
                                }
                                else if node_command == SimulationControllerCommand.QueryTextFilesList {
                                    query_text_files_list(node_command, node-type, node_id);
                                }
                                else if node_command == SimulationControllerCommand.GetTextFilesList {
                                    get_text_files_list(node_command, node-type, node_id);
                                }
                            }
                        }
                    }
                }
            }
            
            //? Graph column
            Rectangle { 
                horizontal-stretch: 2; 
                vertical-stretch: 1; 
                background: Palette.bg; 
                clip: true;

                VerticalLayout {
                    width: parent.width;
                    height: parent.height;
                    padding: 16px;
                    alignment: center;

                    Image {
                        source: root.graph_image;
                        width: 624px;
                        height: 624px;
                    }
                }

                for edge[i] in edges: Line {
                    from_x: edge.from_x;
                    from_y: edge.from_y;
                    to_x: edge.to_x;
                    to_y: edge.to_y;
                    offset: edge.offset;
                }

                for node[i] in nodes: Circle {
                    center_x: node.x;
                    center_y: node.y;
                    size: node.size;
                    kind: node.kind;
                    label: node.label;
                }
            }

            //? Commands column
            Rectangle {
                horizontal-stretch: 1;
                vertical-stretch: 1;
                background: Palette.bg;
                clip: true;

                Flickable {
                    width: parent.width;
                    height: parent.height;
                
                    VerticalLayout {
                        width: parent.width;

                        padding: 16px;
                        spacing: 8px;

                        alignment: start;
                        
                        Text {
                            text: "LOGS";
                            color: Palette.grey;
                            font-size: 16px;
                            font-weight: 800;
                        }

                        Rectangle { height: 4px; }

                        for log[i] in logs : Text {
                            text: log;
                            wrap: word-wrap;
                        }
                        
                    }
                }
                
            }
        }
    }

    add_sender_menu := AddSenderMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.add_sender(node_command, node_type, node_id, args);
        }
    }

    remove_sender_menu := RemoveSenderMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.remove_sender(node_command, node_type, node_id, args);
        }
    }

    set_packet_drop_rate_menu := SetPacketDropRateMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.set_packet_drop_rate(node_command, node_type, node_id, args);
        }
    }

    send_message_menu := SendMessageMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.send_message(node_command, node_type, node_id, args);
        }
    }

    register_to_server_menu := RegisterToServerMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.register_to_server(node_command, node_type, node_id, args);
        }
    }

    get_file_menu := GetFileMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.get_file(node_command, node_type, node_id, args);
        }
    }

    get_text_file_menu := GetTextFileMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.get_text_file(node_command, node_type, node_id, args);
        }
    }

    get_media_file_menu := GetMediaFileMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.get_media_file(node_command, node_type, node_id, args);
        }
    }

    add_text_file_menu := AddTextFileMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.add_text_file(node_command, node_type, node_id, args);
        }
    }

    add_text_file_from_path_menu := AddTextFileFromPathMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.add_text_file_from_path(node_command, node_type, node_id, args);
        }
    }

    add_media_file_from_path_menu := AddMediaFileFromPathMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.add_media_file_from_path(node_command, node_type, node_id, args);
        }
    }

    remove_text_file_menu := RemoveTextFileMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.remove_text_file(node_command, node_type, node_id, args);
        }
    }

    remove_media_file_menu := RemoveMediaFileMenu {
        on_ok(node_command, node_type, node_id, args) => {
            root.remove_media_file(node_command, node_type, node_id, args);
        }
    }
}
